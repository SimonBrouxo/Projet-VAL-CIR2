=====================================================================


			Compte-rendu du projet VAL, Simon Broucqsault

		- Présentation globale du projet
		- Partie code
		- Réussites et difficultés
		- Cahier des charges
		- Conclusion du projet


=====================================================================


		- Présentation globale du projet


Le projet consistait à reproduire une modélisation simplifiée d’un système de transport de type « VAL ».
Ce système devait pouvoir gérer des stations et des rames de métro grâce à un superviseur.
Pour réaliser ce projet, nous devons utiliser nos connaissances du langage C++ et utiliser la 
bibliothèque SFML pour gérer la partie graphique.


=====================================================================


		- Partie code


	- VAL.hpp


Pour notre projet, nous avons commencé par définir 3 classes suivantes dans un fichier VAL.hpp:

- Superviseur : pour gérer le nombre de rames et de stations dans le métro
- Rame : pour contenir les informations d'une rame : son id, sa position, le nombre de passagers et sa 
vitesse
- Station : pour contenir les informations d'une station : son nom, son id, sa position et le nombre de 
personnes dans la station

Ce fichier contient aussi le chemin pour accéder aux images du projet (le background, la rame et la 
station), les bibliothèques externes utilisées dans le code et des valeurs constantes.


	- VAL.cpp


Nous avons ensuite déclaré les constructeurs et les méthodes associés à ces classes dans un fichier VAL.cpp.
Ce fichier contient d'autres déclarations de fonction utiles dans le code.


	- main.cpp


J'ai commencé le main.cpp  dans l'optique de créer un métro personnalisable.

On commence par l'initialisation du métro grâce à la classe Superviseur. On demande à l'utilisateur combien
de stations et de rames sont présentes dans le métro.

Selon le nombre de stations, on personnalise chaque station en créant un objet Station. On stocke les 
attributs dans des vecteurs et des maps.
Pour confirmer la saisie des stations par l'utilisateur, on affiche les noms de stations par id, pour les
ranger dans l'ordre, grâce à une fonction lambda.

Pour la création des rames, on va les créer dans des threads tous les 10 secondes.
Les positions des rames sont initialisées depuis les coordonnées de la première station.
A l'intérieur des threads, on créé donc un objet Rame et on évalue la rame :
- si elle est en station, elle s'arrête
- si elle quitte la station, elle accélère
- si elle arrive en station, elle ralentit
- si elle est en chemin, elle atteint une vitesse maximale
Le thread va aussi donner des informations sur la console par rapport au nombre de passagers entrant et
sortant des rames, et afficher les infos de chaque rame toutes les 5 secondes. On rejoint les threads en
fin de code.

On s'occupe ensuite de la fenêtre SFML, des textures et sprites des images, des erreurs de chargements des
images et de la taille des sprites.
Dans la boucle principale de SFML, on va d'abord dessiner les stations, puis les lignes pour relier chaque
station (la dernière ligne qui relie la dernière station à la première est en rouge) et on termine par
dessiner chaque rame en mouvement. Si l'on ferme la fenêtre, les threads s'arrêtent. 


=====================================================================


		- Réussites et difficultés


Pour les réussites du projet, le programme permet de modéliser de façon simplifiée un métro en laissant 
une liberté de manipulation à l'utilisateur. Il permet entre autres de modéliser n'importe quel métro.

Les difficultés que j'ai rencontrées sont l'implémentation des threads et l'affichage des sprites de rames 
en mouvement.

Concernant le travail en groupe, je suis très déçu, car nous n'avons presque pas communiqué entre nous et
j'ai dû m'occuper de l'entièreté du code.


=====================================================================


		- Cahier des charges

Globalement, le cahier des charges en rempli, mais il manque des fonctionnalités importantes : 
- La voie de réserve
- La gestion des personnes dans les stations


=====================================================================


		- Conclusion du projet


Malgré un manque de communication crucial, le projet est fonctionnel, même si j'aurais voulu apporter des
éléments en plus dans le projet, comme les infos des rames et stations directement dans la fenêtre SFML.